create table CUSTOMER_ORDERS (CREATION_DATE timestamp(6) not null, customer_id bigint not null, id bigint generated by default as identity, ORDER_STATUS varchar(10) not null, primary key (id));
create table CUSTOMERS (expirationdate CHAR(18) CHECK(LENGTH(EXPIRATIONDATE) >= 3) not null, id bigint generated by default as identity, phoneNumber CHAR(18) CHECK(LENGTH(PHONENUMBER) >= 9) not null, cardnumber CHAR(80) CHECK(LENGTH(CARDNUMBER) >= 28) not null, address CHAR(50) CHECK(LENGTH(ADDRESS) >= 20) not null, fullname VARCHAR(150)  CHECK(LENGTH(FULLNAME) >= 10) not null, email varchar(255), primary key (id));
create table FAMILY_OF_PRODUCTS (id bigint generated by default as identity, FAMILYNAME VARCHAR(50) DEFAULT 'FAMILYNAME' not null, primary key (id));
create table ORDER_LINES (APPLIED_DISCOUNT numeric(4,2) not null, PRICE_PER_UNIT numeric(8,2) not null, QUANTITY integer not null check (QUANTITY>=1), ORDER_ID bigint not null, PRODUCT_ID bigint not null, id bigint generated by default as identity, primary key (id));
create table Products (DISCOUNTS numeric(4,2) not null, PRICES numeric(6,2) not null, STOCK integer not null check (STOCK>=0), FAMILY_ID bigint, PROVIDER_ID bigint, RATE_ID bigint, id bigint generated by default as identity, name VARCHAR(150)  CHECK(LENGTH(NAME) >= 10) not null, description VARCHAR(150)  CHECK(LENGTH(DESCRIPTION) >= 10) not null, IMAGES_URL varchar(2083) not null, primary key (id));
create table PRODUCTS_RATINGS (id bigint generated by default as identity, RATES VARCHAR(50) DEFAULT 'RATES' not null, primary key (id));
create table PROVIDERS (id bigint generated by default as identity, providerPhone CHAR(18) CHECK(LENGTH(PROVIDERPHONE) >= 9) not null, providerCif VARCHAR(30) CHECK(LENGTH(PROVIDERCIF) >= 9), providerAddress CHAR(100) CHECK(LENGTH(PROVIDERADDRESS) >= 10) not null, providerName VARCHAR(150) CHECK(LENGTH(PROVIDERNAME) >= 10) not null, PROVIDERS_EMAIL varchar(255), primary key (id));
create table ROLES (rolename varchar(255) not null, primary key (rolename));
create table USERS (enabled boolean, expiryDateAccount date, expiryDateCredentials date, lockedAccount boolean, address varchar(255), email varchar(255), fullname varchar(255), password varchar(255), phoneNumber varchar(255), username varchar(255) not null, primary key (username));
create table USERS_HAVE_ROLES (HamaUser_username varchar(255) not null, roleSet_rolename varchar(255) not null, primary key (HamaUser_username, roleSet_rolename));
alter table if exists CUSTOMER_ORDERS add constraint FKdbr9b2y3fk1d7l95je3h6iryt foreign key (customer_id) references CUSTOMERS;
alter table if exists ORDER_LINES add constraint FKlm21r7bcfubjc2nov5c9qgypv foreign key (ORDER_ID) references CUSTOMER_ORDERS;
alter table if exists ORDER_LINES add constraint FKi8l7egcmf70kbrea4kqsah4lq foreign key (PRODUCT_ID) references Products;
alter table if exists Products add constraint FKat66cf4ablir6j698g26u2s2r foreign key (FAMILY_ID) references FAMILY_OF_PRODUCTS;
alter table if exists Products add constraint FKnwll65876yeevu84dk0o9iowu foreign key (PROVIDER_ID) references PROVIDERS;
alter table if exists Products add constraint FKjjah1veqwt2vohlv0ppqrwcgv foreign key (RATE_ID) references PRODUCTS_RATINGS;
alter table if exists USERS_HAVE_ROLES add constraint FK9d81i9s9od48d5x0fr18i2m8d foreign key (roleSet_rolename) references ROLES;
alter table if exists USERS_HAVE_ROLES add constraint FK9q0bgnletjowq232s34l3afqj foreign key (HamaUser_username) references USERS;
